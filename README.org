* org-similarity

=org-similarity= is a package to help Emacs [[https://orgmode.org][org-mode]] users discover similar or related files. Under the hood, it uses Python and [[https://github.com/scikit-learn/scikit-learn][scikit-learn]] for text feature extraction, and [[https://github.com/nltk/nltk][nltk]] for text pre-processing. More specifically, this package provides a function to recursively scan a given directory for =org= files, clean their content by stripping the front matter and some undesired characters, tokenize them, replace each token with its respective linguistic stem, generate a TF-IDF sparse matrix, and calculate the cosine similarity between these documents and the buffer you are currently working on.

[[./assets/example.gif]]

** Installation

You can install this package using =straing.el=, its Doom Emacs wrapper, or manually cloning the repository. In either case, you can choose to use the =main= branch for a stable version of the repository, or =develop= with the latest additions. Just replace the branch name wherever it appears in the snippets below.

*** Using straight.el

Add the following to your =init.el=:

#+begin_src elisp
(straight-use-package '(org-similarity :type git :host github :repo
 "brunoarine/org-similarity" :branch "develop" :files ("*.el" "*.txt"
 "orgsimilarity")))
#+end_src

*** Doom Emacs

Or if you are using Doom Emacs, add the following to =packages.el=:

#+begin_src elisp
(package! org-similarity :recipe (:host github :repo "brunoarine/org-similarity"
   :branch "develop" :files ("*.el" "*.txt" "orgsimilarity")))
#+end_src

*** Manual installation

Clone the repository:

#+begin_src sh
git clone -b main https://github.com/brunoarine/org-similarity
#+end_src

Then add the package to your =load-path= in your =init.el=:
#+begin_src elisp
(add-to-list 'load-path "/path/to/org-similarity")
#+end_src

** Loading the package

Load the package using the =require= function in your =init.el=:

#+begin_src elisp
(require 'org-similarity)
#+end_src

Or using =use-package=:

#+begin_src elisp
(use-package org-similarity
  :load-path  "path/to/org-similarity")
#+end_src

** Usage

*** Insert list of similar documents at the end of buffer
In a buffer with an open =org-mode= file, type =M-x org-similarity-insert-list RET=.

If this is the first time you run that command, it will ask you to install the necessary Python dependencies. By pressing =y= to continue, it will create a virtual environment under the hood and download the requirements automatically. Once finished, you can close the installation log buffer, and run the command again.

*** Show list of similar documents in the sidebar
In a buffer with an open =org-mode= file, type =M-x org-similarity-sidebuffer RET=.

It will perform the same checks as above, but instead of inserting a list in the open buffer, it will create a new one with the links list.

*** Show list of documents that are similar to a search query
When you type =M-x org-similarity-query=, you'll be able to input a word or sentence, and =org-similarity= will fetch related documents in the side buffer.

** Configuration

There are a few variables that can be set to customize how =org-similarity= operates and generates the list of similar documents:

#+begin_src elisp
;; Directory to scan for possibly similar documents.
;; org-roam users might want to change it to `org-roam-directory'.
(setq org-similarity-directory org-directory)

;; The language passed to the Snowball stemmer in the `nltk' package.  The
;; following languages are supported: Arabic, Danish, Dutch, English, Finnish,
;; French, German, Hungarian, Italian, Norwegian, Portuguese, Romanian, Russian,
;; Spanish and Swedish.
(setq org-similarity-language "english")

;; Algorithm to use when generating the scores list. The possible choices are
;; `tfidf' or `bm25'. Default is `tfidf' and it generally works better in
;; most cases. However, `bm25' may be a bit more robust in rare cases, depending
;; on the size of your notes.
(setq org-similarity-algorithm "tfidf")

;; How many similar entries to list at the end of the buffer.
(setq org-similarity-number-of-documents 10)

;; Minimum document size (in number of words) to be included in the corpus.
;; The number of words is related to the document body, and doesn't included
;; the file properties (not even the title).
;; Default is 0 (include all documents, even the empty ones).
(setq org-similarity-min-words 0)

;; Whether to prepend the list entries with similarity scores.
(setq org-similarity-show-scores nil)

;; Whether the resulting list of similar documents will point to ID property or
;; filename. Default it nil.
;; However, I recommend setting it to `t' if you use `org-roam' v2.
(setq org-similarity-use-id-links nil)

;; Scan for files inside `org-similarity-directory' recursively.
(setq org-similarity-recursive-search nil)

;; Filepath to a custom Python interpreter (e.g. '/path/to/venv/bin/python'
;; If the package's requirements aren't met, `org-similarity' will try to
;; install or upgrade them automatically. If `nil', the package will create
;; and use a virtual environment in the same directory where `org-similarity'
;; is located (usually `~/.emacs.d/.local' if you installed via a package
;; manager, or in the path where you cloned this repo and loaded the package
;; manually).
(setq org-similarity-custom-python-interpreter nil)

;; Remove first result from the scores list. Useful if the source document is
;; inside the same directory as the target documents, and you don't want to see
;; it included in the list for obvious reasons. Default is nil."
(setq org-similarity-remove-first nil)

;; Show a heading above the list. You can set it to "" if you
;; wish to hide the heading altogether.
(setq org-similarity-header "** Related notes")

;; String to prepend the list items. You can set it to "* " to turn each
;; item into org-mode headings, or "- " to turn them into an org-mode list.
;; Set the variable to "" if remove any prefix to the list items.
(setq org-similarity-prefix "- ")
#+end_src


** Benchmarking

You can test the textual similarity algorithm employed in =org-similarity= by testing it against the [[http://ixa2.si.ehu.eus/stswiki/index.php/STSbenchmark][STSbenchmark]] dataset. Create a directory named =./data/raw= and extract the files in the dataset into it.

After that, run:

#+begin_src sh
make eval
#+end_src

** Changelog

*** 2022-12-26 - v0.2
- Automated installation of Python dependencies (using virtual environments).
- Better =org-roam= v2 compatibility.
- =orgparse= to parse org-mode files.
- =org-similarity-sidebuffer= command will show results in a side buffer.
- Refactored and optimized Python code.

*** 2020-12-05 - v0.1-alpha
- Alpha release of the package.
- Tested with =org-roam= v1.
